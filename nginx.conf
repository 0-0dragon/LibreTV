server {
    listen       80;
    server_name  localhost;
    root /usr/share/nginx/html;
    index index.html index.htm;

    #access_log  /var/log/nginx/host.access.log  main;

    resolver 114.114.114.114 8.8.8.8 valid=300s;
    resolver_timeout 5s;

    # 创建代理路由
    location /proxy/ {
        # 设置CORS头部
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';

        # OPTIONS请求处理
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        set $target_url '';

        # 执行Lua脚本解析URL
        rewrite_by_lua_file /usr/share/nginx/html/proxy.lua;

        proxy_ssl_server_name on;
        proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;

        # 设置代理头信息
        # 不设置Host，让Nginx自动根据目标URL设置
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # 处理可能的重定向
        proxy_redirect off;
        proxy_buffering off;
        # 代理超时设置
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        proxy_pass $target_url;
    }

    # 添加API代理，解决跨域问题
    location /api/ {
        default_type application/json;
        content_by_lua_block {
            local http = require "resty.http"
            local cjson = require "cjson"
            local httpc = http.new()

            -- 获取原始请求的信息
            local method = ngx.req.get_method()
            local args = ngx.req.get_uri_args()
            local target_url = args.url
            
            if not target_url then
                ngx.status = 400
                ngx.say(cjson.encode({error = "Missing url parameter"}))
                return
            end
            
            -- 移除url参数，保留其他参数
            args.url = nil
            
            -- 设置超时
            httpc:set_timeout(5000)
            
            -- 发送请求
            local res, err = httpc:request_uri(target_url, {
                method = method,
                query = args,
                headers = {
                    ["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36",
                    ["Content-Type"] = "application/json"
                }
            })
            
            if not res then
                ngx.status = 500
                ngx.say(cjson.encode({error = "Failed to request: " .. (err or "unknown error")}))
                return
            end
            
            -- 返回响应
            ngx.status = res.status
            for k, v in pairs(res.headers) do
                -- 排除一些可能导致问题的头
                if k ~= "Transfer-Encoding" and k ~= "Connection" then
                    ngx.header[k] = v
                end
            end
            ngx.say(res.body)
        }
    }

    # 静态文件缓存
    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        expires 7d;
    }

    location / {
        try_files $uri $uri/ /index.html;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}